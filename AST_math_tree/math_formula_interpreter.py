from math_ast.math_parser import MathParser, ParserException

tests = [
    ["-49 / 40 * -7 - -82 * 80 / 62 * 92 / 4", 2442.123387096774],
    ["-40 - -6 * 4 / -12 + -3 * -3 + 12 - -63", 42.0],
    ["-54 + -27 - 59 - 6 - 59 / -34 - -39 - 45", -150.26470588235293],
    ["61 + 27 - -86 - -18 / 81 - 17 + 64 + -46", 175.22222222222223],
    ["11 / -89 / 94 - 39 / 84 * -71 + -74 + -15", -56.03702913151873],
    ["58 + -10 / 59 - -49 / 12 - 75 - 34 * -43", 1448.9138418079096],
    ["-51 * -32 * 51 - 63 / -77 - 38 + -67 / -20", 83198.16818181818],
    ["-56 - 4 * -81 + -52 + 5 * -39 - 96 * 99", -9483],
    ["-34 + 80 - 82 * -23 + 84 + 54 + 22 + 59", 2151],
    ["-45 - -46 - 19 / -41 - -12 / -79 + -88 - -14", -72.68848410003088],
    ["29 - -68 / -17 * -6 + 69 + -86 - -85 / 84", 37.01190476190476],
    ["-87 - 52 / 46 * -98 / 45 * -86 - -51 - -69", -178.71787439613524],
    ["-83 - 58 * -58 - 55 * 27 - -55 + 29 + -99", 1781],
    ["45 - -65 + -76 * -32 - 65 / 76 - 47 - -75", 2569.1447368421054],
    ["85 - 83 * 3 + -16 / 51 - 25 + -79 + -19", -287.3137254901961],
    ["-52 - -17 / -4 + 31 - 1 * 55 + -19 / 69", -80.52536231884058],
    ["85 - -29 - 16 / 76 / 82 - 47 + -72 - -100", 94.997432605905],
    ["91 - -40 / -90 + 41 - -72 / 12 / 35 / 93", 131.5573988735279],
    ["-10 - -36 * 25 * -73 - 10 - -31 * 2 / -82", -65720.75609756098],
    ["-16 - -67 / -94 - 85 - 7 + 36 * -78 - 6", -2922.7127659574467],
    ["22 - -2 - 2 * -2 - -16 / -10 - -33 - 97", -37.6],
    ["-68 / 77 - 20 * -42 - -4 + -6 / -50 - 13", 830.2368831168832],
    ["-18 + -53 - (49)", -120],
    ["(56) / (56 - -45 * -(89)) * (38 / -(((-(-52 * -1)))) - 8)", 0.10308354598048192],
    ["(94) / (69 + -56 / -(41)) + (100 - -((((-20 - 89)))) * 36)", -3822.6641247833622],
    ["-(-52) * (66 + -15 * -(20)) * (-77 / -(((-(-58 / -10)))) - 7)", -385890.2068965517],
    ["-(26) / (-90 - -11 * -(16)) + (-92 * ((((-26 * -44)))) + -84)", -105331.9022556391],
    ["-(26) * (-42 + -57 * -(30)) * (-5 / -(((-(-8 * -10)))) - 56)", 2431318.5],
    ["(-37) - (-45 + 69 * -(29)) / (-57 + -((((49 - -65)))) * -88)", -36.79488721804511],
    ["(59) + (-40 - -84 / -(81)) - (-83 / ((((-61 + 9)))) / 90)", 17.945227920227918],
    ["-(41) + (34 - 42 / -(74)) - (25 + -((((30 * -36)))) * -56)", 60448.56756756757],
    ["(-3) + (83 - 63 * -(93)) * (48 / (((-(100 + -34)))) + 40)", 233355.54545454547],
    ["(28) / (62 + 89 / -(70)) / (-89 / (((-(-23 * 73)))) / 30)", -260.9437567895459],
    ["(34) + (-18 + -53 - (49)) * (-20 * -(((-(-59 - -9)))) * -43)", 5160034],
    ["(9) + (89 + -75 * -(90)) * (-36 / -(((-(-35 + 11)))) * -34)", -348780.0],
    ["-(-(-1))", -1],
    ["1 + 1", 2],
    ["-7 * -(6 / 3)", 14],
    ["8/16", 0.5],
    ["2 + -2", 0],
    ["10- 2- -5", 13],
    ["(((10)))", 10],
    ["3 * 5", 15],
    ["3 -(-1) -(-1)", 5],
    ["2 + 3 * 4 / 3 - 6 / 3 * 1 + 8", 12],
    ["1 + 2 * 3 * (5 - (3 - 1)) - 8", 11],
    ["5 -1", 4],
    ["2 + 3 * 4 / 3 - 6 / 3 * 3 + 8", 8],
    ["-62 - -65 - 55 * 31 - 67 + 13 + 56 * 44", 708],
    ["48 - 55 * 37 * 34 - -10 + 23 / 8 + -73", -69202.125],
    ["(-45) - (73 - 19 * -(43)) * (5 - -(((-(51 + 36)))) - -43)", 34665],
    ["5.5 + 444", 449.5],
    ["(-45.0) - (73.0 - 19.0 * -(43.0)) * (5.0 - -(((-(51.0 + 36.0)))) - -43.0)", 34665]
]

def calc(expression):
    """
    Primary method used for starting parsing and evaluation of a single expression
    :param expression:
    :return:
    """
    parser = MathParser(expression)
    elem = parser.parse()
    return elem.evaluate()

def test():
    """
    Test method, check whether all the expression tests are successful
    """
    index = 0
    for expression, result in tests:
        index += 1
        try:
            print("------------ Next -------------")
            result_obtained = calc(expression)
            if result_obtained == result:
                print(result_obtained, "->", result)
            else:
                print(str(index) +
                      " - Ottenuto " +
                      str(result_obtained) +
                      ", ma dovevo ottenere " +
                      str(result)
                )
        except ParserException as exception:
            print(str(index) + ": " + print(exception))

def start_mfi():
    """
    Method used for starting the interpreter interface
    :return:
    """
    print("Starting math formulas interpreter 0.1. Press 'q' to stop.")
    while True:
        expression = input("formula> ")
        if expression == "":
            continue
        if expression == "q":
            break
        try:
            print(calc(expression))
        except ParserException as exception:
            print(exception)

if __name__ == '__main__':
    start_mfi()
